/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface ACLInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allow"
      | "allowForDecryption"
      | "allowTransient"
      | "allowedForDecryption"
      | "allowedOnBehalf"
      | "allowedTransient"
      | "cleanTransientStorage"
      | "delegateAccountForContract"
      | "delegates"
      | "fhEVMcoprocessorAddress"
      | "getVersion"
      | "isAllowed"
      | "persistAllowed"
      | "persistedAllowedPairs"
      | "removeDelegationForContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowedForDecryption"
      | "NewDelegation"
      | "RevokedDelegation"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allow",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowForDecryption",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTransient",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedForDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedOnBehalf",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTransient",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanTransientStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateAccountForContract",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fhEVMcoprocessorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "persistAllowed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "persistedAllowedPairs",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDelegationForContract",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowForDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTransient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedForDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTransient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanTransientStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateAccountForContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fhEVMcoprocessorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "persistAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "persistedAllowedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDelegationForContract",
    data: BytesLike
  ): Result;
}

export namespace AllowedForDecryptionEvent {
  export type InputTuple = [handlesList: BigNumberish[]];
  export type OutputTuple = [handlesList: bigint[]];
  export interface OutputObject {
    handlesList: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDelegationEvent {
  export type InputTuple = [
    sender: AddressLike,
    delegatee: AddressLike,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    delegatee: string,
    contractAddress: string
  ];
  export interface OutputObject {
    sender: string;
    delegatee: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedDelegationEvent {
  export type InputTuple = [
    sender: AddressLike,
    delegatee: AddressLike,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    delegatee: string,
    contractAddress: string
  ];
  export interface OutputObject {
    sender: string;
    delegatee: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ACL extends BaseContract {
  connect(runner?: ContractRunner | null): ACL;
  waitForDeployment(): Promise<this>;

  interface: ACLInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allow: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  allowForDecryption: TypedContractMethod<
    [handlesList: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  allowTransient: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  allowedForDecryption: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  allowedOnBehalf: TypedContractMethod<
    [
      delegatee: AddressLike,
      handle: BigNumberish,
      contractAddress: AddressLike,
      account: AddressLike
    ],
    [boolean],
    "view"
  >;

  allowedTransient: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  cleanTransientStorage: TypedContractMethod<[], [void], "nonpayable">;

  delegateAccountForContract: TypedContractMethod<
    [delegatee: AddressLike, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  delegates: TypedContractMethod<
    [
      account: AddressLike,
      delegatee: AddressLike,
      contractAddress: AddressLike
    ],
    [boolean],
    "view"
  >;

  fhEVMcoprocessorAddress: TypedContractMethod<[], [string], "view">;

  getVersion: TypedContractMethod<[], [string], "view">;

  isAllowed: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  persistAllowed: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  persistedAllowedPairs: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  removeDelegationForContract: TypedContractMethod<
    [delegatee: AddressLike, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allow"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowForDecryption"
  ): TypedContractMethod<[handlesList: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowTransient"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowedForDecryption"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "allowedOnBehalf"
  ): TypedContractMethod<
    [
      delegatee: AddressLike,
      handle: BigNumberish,
      contractAddress: AddressLike,
      account: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowedTransient"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "cleanTransientStorage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateAccountForContract"
  ): TypedContractMethod<
    [delegatee: AddressLike, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<
    [
      account: AddressLike,
      delegatee: AddressLike,
      contractAddress: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "fhEVMcoprocessorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAllowed"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "persistAllowed"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "persistedAllowedPairs"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeDelegationForContract"
  ): TypedContractMethod<
    [delegatee: AddressLike, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AllowedForDecryption"
  ): TypedContractEvent<
    AllowedForDecryptionEvent.InputTuple,
    AllowedForDecryptionEvent.OutputTuple,
    AllowedForDecryptionEvent.OutputObject
  >;
  getEvent(
    key: "NewDelegation"
  ): TypedContractEvent<
    NewDelegationEvent.InputTuple,
    NewDelegationEvent.OutputTuple,
    NewDelegationEvent.OutputObject
  >;
  getEvent(
    key: "RevokedDelegation"
  ): TypedContractEvent<
    RevokedDelegationEvent.InputTuple,
    RevokedDelegationEvent.OutputTuple,
    RevokedDelegationEvent.OutputObject
  >;

  filters: {
    "AllowedForDecryption(uint256[])": TypedContractEvent<
      AllowedForDecryptionEvent.InputTuple,
      AllowedForDecryptionEvent.OutputTuple,
      AllowedForDecryptionEvent.OutputObject
    >;
    AllowedForDecryption: TypedContractEvent<
      AllowedForDecryptionEvent.InputTuple,
      AllowedForDecryptionEvent.OutputTuple,
      AllowedForDecryptionEvent.OutputObject
    >;

    "NewDelegation(address,address,address)": TypedContractEvent<
      NewDelegationEvent.InputTuple,
      NewDelegationEvent.OutputTuple,
      NewDelegationEvent.OutputObject
    >;
    NewDelegation: TypedContractEvent<
      NewDelegationEvent.InputTuple,
      NewDelegationEvent.OutputTuple,
      NewDelegationEvent.OutputObject
    >;

    "RevokedDelegation(address,address,address)": TypedContractEvent<
      RevokedDelegationEvent.InputTuple,
      RevokedDelegationEvent.OutputTuple,
      RevokedDelegationEvent.OutputObject
    >;
    RevokedDelegation: TypedContractEvent<
      RevokedDelegationEvent.InputTuple,
      RevokedDelegationEvent.OutputTuple,
      RevokedDelegationEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2Step__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "EncryptedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EncryptedERC20__factory>;
    getContractFactory(
      name: "ACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ACL__factory>;
    getContractFactory(
      name: "FhevmLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FhevmLib__factory>;
    getContractFactory(
      name: "GatewayContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayContract__factory>;
    getContractFactory(
      name: "IACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IACL__factory>;
    getContractFactory(
      name: "IFHEVMCoprocessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFHEVMCoprocessor__factory>;
    getContractFactory(
      name: "KMSVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KMSVerifier__factory>;
    getContractFactory(
      name: "MockedPrecompile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockedPrecompile__factory>;
    getContractFactory(
      name: "TFHEExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TFHEExecutor__factory>;
    getContractFactory(
      name: "TestAsyncDecrypt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAsyncDecrypt__factory>;
    getContractFactory(
      name: "GatewayContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayContract__factory>;
    getContractFactory(
      name: "ACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ACL__factory>;
    getContractFactory(
      name: "IACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IACL__factory>;
    getContractFactory(
      name: "IFHEVMCoprocessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFHEVMCoprocessor__factory>;
    getContractFactory(
      name: "KMSVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KMSVerifier__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Ownable2Step",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable2Step>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "EncryptedERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EncryptedERC20>;
    getContractAt(
      name: "ACL",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ACL>;
    getContractAt(
      name: "FhevmLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FhevmLib>;
    getContractAt(
      name: "GatewayContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayContract>;
    getContractAt(
      name: "IACL",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IACL>;
    getContractAt(
      name: "IFHEVMCoprocessor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFHEVMCoprocessor>;
    getContractAt(
      name: "KMSVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KMSVerifier>;
    getContractAt(
      name: "MockedPrecompile",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockedPrecompile>;
    getContractAt(
      name: "TFHEExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TFHEExecutor>;
    getContractAt(
      name: "TestAsyncDecrypt",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAsyncDecrypt>;
    getContractAt(
      name: "GatewayContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayContract>;
    getContractAt(
      name: "ACL",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ACL>;
    getContractAt(
      name: "IACL",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IACL>;
    getContractAt(
      name: "IFHEVMCoprocessor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFHEVMCoprocessor>;
    getContractAt(
      name: "KMSVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KMSVerifier>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2Step>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "EncryptedERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EncryptedERC20>;
    deployContract(
      name: "ACL",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ACL>;
    deployContract(
      name: "FhevmLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FhevmLib>;
    deployContract(
      name: "GatewayContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayContract>;
    deployContract(
      name: "IACL",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IACL>;
    deployContract(
      name: "IFHEVMCoprocessor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEVMCoprocessor>;
    deployContract(
      name: "KMSVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KMSVerifier>;
    deployContract(
      name: "MockedPrecompile",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockedPrecompile>;
    deployContract(
      name: "TFHEExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TFHEExecutor>;
    deployContract(
      name: "TestAsyncDecrypt",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestAsyncDecrypt>;
    deployContract(
      name: "GatewayContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayContract>;
    deployContract(
      name: "ACL",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ACL>;
    deployContract(
      name: "IACL",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IACL>;
    deployContract(
      name: "IFHEVMCoprocessor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEVMCoprocessor>;
    deployContract(
      name: "KMSVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KMSVerifier>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Ownable2Step",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2Step>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "EncryptedERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EncryptedERC20>;
    deployContract(
      name: "ACL",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ACL>;
    deployContract(
      name: "FhevmLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FhevmLib>;
    deployContract(
      name: "GatewayContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayContract>;
    deployContract(
      name: "IACL",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IACL>;
    deployContract(
      name: "IFHEVMCoprocessor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEVMCoprocessor>;
    deployContract(
      name: "KMSVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KMSVerifier>;
    deployContract(
      name: "MockedPrecompile",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockedPrecompile>;
    deployContract(
      name: "TFHEExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TFHEExecutor>;
    deployContract(
      name: "TestAsyncDecrypt",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestAsyncDecrypt>;
    deployContract(
      name: "GatewayContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GatewayContract>;
    deployContract(
      name: "ACL",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ACL>;
    deployContract(
      name: "IACL",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IACL>;
    deployContract(
      name: "IFHEVMCoprocessor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEVMCoprocessor>;
    deployContract(
      name: "KMSVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KMSVerifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
